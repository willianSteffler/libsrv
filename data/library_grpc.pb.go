// Code generated by protoc-gen-go-grpcctrl. DO NOT EDIT.

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibraryClient is the client API for Library service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryClient interface {
	ConsultarLivros(ctx context.Context, in *ConsultarLivroArgs, opts ...grpc.CallOption) (Library_ConsultarLivrosClient, error)
	CriarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error)
	DeletarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error)
	Alterar(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error)
}

type libraryClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryClient(cc grpc.ClientConnInterface) LibraryClient {
	return &libraryClient{cc}
}

func (c *libraryClient) ConsultarLivros(ctx context.Context, in *ConsultarLivroArgs, opts ...grpc.CallOption) (Library_ConsultarLivrosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Library_ServiceDesc.Streams[0], "/libsrv.Library/ConsultarLivros", opts...)
	if err != nil {
		return nil, err
	}
	x := &libraryConsultarLivrosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Library_ConsultarLivrosClient interface {
	Recv() (*Livro, error)
	grpc.ClientStream
}

type libraryConsultarLivrosClient struct {
	grpc.ClientStream
}

func (x *libraryConsultarLivrosClient) Recv() (*Livro, error) {
	m := new(Livro)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *libraryClient) CriarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error) {
	out := new(SingleResp)
	err := c.cc.Invoke(ctx, "/libsrv.Library/CriarLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) DeletarLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error) {
	out := new(SingleResp)
	err := c.cc.Invoke(ctx, "/libsrv.Library/DeletarLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) Alterar(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*SingleResp, error) {
	out := new(SingleResp)
	err := c.cc.Invoke(ctx, "/libsrv.Library/Alterar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServer is the server API for Library service.
// All implementations must embed UnimplementedLibraryServer
// for forward compatibility
type LibraryServer interface {
	ConsultarLivros(*ConsultarLivroArgs, Library_ConsultarLivrosServer) error
	CriarLivro(context.Context, *Livro) (*SingleResp, error)
	DeletarLivro(context.Context, *Livro) (*SingleResp, error)
	Alterar(context.Context, *Livro) (*SingleResp, error)
	mustEmbedUnimplementedLibraryServer()
}

// UnimplementedLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServer struct {
}

func (UnimplementedLibraryServer) ConsultarLivros(*ConsultarLivroArgs, Library_ConsultarLivrosServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsultarLivros not implemented")
}
func (UnimplementedLibraryServer) CriarLivro(context.Context, *Livro) (*SingleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriarLivro not implemented")
}
func (UnimplementedLibraryServer) DeletarLivro(context.Context, *Livro) (*SingleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletarLivro not implemented")
}
func (UnimplementedLibraryServer) Alterar(context.Context, *Livro) (*SingleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alterar not implemented")
}
func (UnimplementedLibraryServer) mustEmbedUnimplementedLibraryServer() {}

// UnsafeLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServer will
// result in compilation errors.
type UnsafeLibraryServer interface {
	mustEmbedUnimplementedLibraryServer()
}

func RegisterLibraryServer(s grpc.ServiceRegistrar, srv LibraryServer) {
	s.RegisterService(&Library_ServiceDesc, srv)
}

func _Library_ConsultarLivros_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsultarLivroArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServer).ConsultarLivros(m, &libraryConsultarLivrosServer{stream})
}

type Library_ConsultarLivrosServer interface {
	Send(*Livro) error
	grpc.ServerStream
}

type libraryConsultarLivrosServer struct {
	grpc.ServerStream
}

func (x *libraryConsultarLivrosServer) Send(m *Livro) error {
	return x.ServerStream.SendMsg(m)
}

func _Library_CriarLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).CriarLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libsrv.Library/CriarLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).CriarLivro(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_DeletarLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).DeletarLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libsrv.Library/DeletarLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).DeletarLivro(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_Alterar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).Alterar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libsrv.Library/Alterar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).Alterar(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

// Library_ServiceDesc is the grpc.ServiceDesc for Library service.
// It's only intended for direct use with grpcctrl.RegisterService,
// and not to be introspected or modified (even as a copy)
var Library_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libsrv.Library",
	HandlerType: (*LibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CriarLivro",
			Handler:    _Library_CriarLivro_Handler,
		},
		{
			MethodName: "DeletarLivro",
			Handler:    _Library_DeletarLivro_Handler,
		},
		{
			MethodName: "Alterar",
			Handler:    _Library_Alterar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsultarLivros",
			Handler:       _Library_ConsultarLivros_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "library.proto",
}
